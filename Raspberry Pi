from tensorflow import keras        #import needed libraries
import numpy as np
import curses
import matplotlib.pyplot as plt
from skimage import transform
from skimage import util
from skimage.color import rgb2gray
from PIL import Image, ImageChops
from picamera import PiCamera                     #import libraries for camera
from time import sleep
from gpiozero import LED
import serial

screen = curses.initscr()
screen.nodelay(True)
curses.noecho()
curses.cbreak()
screen.keypad(True)

ser = serial.Serial("/dev/ttyACM0",9600)        #begin serial connection
ser.flushInput()
light = LED(14)
camera = PiCamera()                            #define PiCamera

def DisplayPic(x):                            #create a function to display the image at its given state
    plt.figure()
    plt.imshow(x)
    plt.colorbar()
    plt.grid(False)
    plt.show()

def TakePic():
    camera.resolution = (64, 64)                   #set resolution to 28 by 28 pixel- for NN
    camera.color_effects = (128, 128)              #Grayscale
    camera.zoom = (0.05, 0.05, 1, 1)               #zoom
    camera.brightness = 80
    light.on()
    print("on")
    camera.start_preview()                         #turn camera on
    sleep(3)                                       #allow camera to warm up for 2 seconds
    camera.capture('/home/pi/Desktop/image.jpg')   #name image
    camera.stop_preview()
    light.off()
    print("off")
    return 

def NN():
    pic1 = Image.open("/home/pi/Desktop/image.jpg")    #open image
        
    gray = pic1.convert('L')            #convert pic1 to a grayscale image 0 - 255 (black - white)
    bw = np.array(gray).copy()          #convert to a numpy array
           
    bw[bw < 235] = 0                    #make all numpy values either 0 or 255
    bw[bw >= 235] = 255
    pic_1 = Image.fromarray(bw)         #create an image from the numpy array
         
    pic_1 = trim(pic_1, 255)            #use trim function to get rid of all white space
        
    old_size = pic_1.size               #define size of the original imag
        
    new_size = (65, 65)                                 #resize to 57 by 57
    x = int(round(new_size[0]-old_size[0]) / 2)         #find x coordinate for the center of the new image
    y = int(round(new_size[1]-old_size[1]) / 2)         #find y coordinate for the center of the new image
    pic = Image.new("RGB", new_size, (255, 255, 255))   #create white 40 by 40 image
    pic.paste(pic_1, (x, y))                            #paste original image in center

    pic = np.array(pic)                          #make image into an array to transform function
        
    pic = [transform.resize(pic, (28, 28))]      #resize image
        
    pic = np.array(pic)                          #make image into an array to grayscale function
    pic = rgb2gray(pic)                          #convert to gray scale (0.0-1.0)
        
    pic = util.invert(pic)                       #invert 0.0 and 1.0
    
    #DisplayPic(pic[0])
        
    pic[pic < .125] = 0                         #take all of the values less than .125 and make them 0
    pic[pic >= .125] =1
            
    #DisplayPic(pic[0])
        
    print("model")
        
    new_model = keras.models.load_model('/home/pi/Desktop/handwritingmodel .h5')   #use pre-trained model
        
    prediction = new_model.predict(pic)                     #predict the number
    number = np.argmax(prediction[0])
    return str(number)
        
def trim(im, border):                           #create function to trim image down to a rectangle
    bg = Image.new(im.mode, im.size, border)
    diff = ImageChops.difference(im, bg)
    bbox = diff.getbbox()
    if bbox:
        return im.crop(bbox)
def remote(screen):
   screen.clear()

while True:
    s_in=ser.readline().strip() #strip new line serial characters
    s_in=s_in.decode('ascii')   #decode to get rid of other unessecary charaters
    if (s_in == "c"):
        TakePic()
        ser.write(NN().encode())
        print("done")
        ser.flushInput()
            
        continue

    elif (s_in == "m"):
        curses.wrapper(remote)
        char = screen.getch()
        if (char == ord("w")):
            print("forward")
            ser.write(str("1").encode())
            continue
        if (char == ord("s")):
            print("backward")
            ser.write(str("2").encode())
            continue
        if (char == ord("a")):
            print("left")
            ser.write(str("3").encode())
            continue
        if (char == ord("d")):
            print("right")
            ser.write(str("4").encode())
            continue
        if (char == ord("e")):
            print("up right")
            ser.write(str("7").encode())
            continue
        if (char == ord("q")):
            print("up left")
            ser.write(str("5").encode())
            continue
        if (char == ord("z")):
            print("down left")
            ser.write(str("6").encode())
            continue
        if (char == ord("x")):
            print("down right")
            ser.write(str("8").encode())
            continue
        if (char == ord("r")):
            print("reset")
            ser.write(str("0").encode())
            continue
        if (char == ord("f")):
            print("spin")
            ser.write(str("0").encode())
        if (char == ord("t")):
            curses.nocbreak(); screen.keypad(False); curses.echo()
            curses.endwin()
            break
        else:
            curses.nocbreak(); screen.keypad(False); curses.echo()
            curses.endwin()
            continue

            
    else: 
        continue
