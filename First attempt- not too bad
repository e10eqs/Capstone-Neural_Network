"""Neural Network attempt 1
    This network will be the basis for other networks I create using my own data
    based on example:
    https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/neural_network_raw.py
    and article:
    https://www.datacamp.com/community/tutorials/tensorflow-tutorial
"""


import tensorflow as tf                                                #import all needed libraries and functions
import matplotlib.pyplot as plt
import numpy as np
import os.path
import random
import skimage
from skimage import transform
from skimage.color import rgb2gray

def load_data(data_directory):                                          #create function to load data
    directories = [d for d in os.listdir(data_directory)
                   if os.path.isdir(os.path.join(data_directory, d))]
    labels = []
    images = []
    for d in directories:
        label_directory = os.path.join(data_directory, d)
        file_names = [os.path.join(label_directory, f)
                      for f in os.listdir(label_directory)
                      if f.endswith(".ppm")]
        for f in file_names:
            images.append(skimage.data.imread(f))
            labels.append(int(d))
    return images, labels

ROOT_PATH = "/Users/ethanseath/Desktop/data"  #path name here
train_data_directory = os.path.join(ROOT_PATH, "Training")
test_data_directory = os.path.join(ROOT_PATH, "Testing")

images, labels = load_data(train_data_directory)

images28 = [transform.resize(image, (28, 28)) for image in images]      #resize images
images28 = np.array(images28)                                           #create array from images
images28 = rgb2gray(images28)                                           #grayscale images

x = tf.placeholder(dtype = tf.float32, shape = [None, 28, 28])          #set placeholder
y = tf.placeholder(dtype = tf.int32, shape = [None])

images_flat = tf.contrib.layers.flatten(x)                              #flatten layers of data

logits = tf.contrib.layers.fully_connected(images_flat, 62, tf.nn.relu)  #connect layers

cost = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels = y, logits = logits))      #define cost function likely will change later

train_op = tf.train.GradientDescentOptimizer(learning_rate=.001).minimize(cost)      #train using stochastic gradient decesnt

correct_pred = tf.argmax(logits, 1)                                      #logits to lables

accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))             #define accuracy

tf.set_random_seed(1234)                                                 #start inputting data

sess = tf.Session()

sess = tf.Session()

sess.run(tf.global_variables_initializer())

for i in range(250):
        print('EPOCH', i)
        _, accuracy_val = sess.run([train_op, accuracy], feed_dict={x: images28, y: labels})
        if i % 10 == 0:
            print("Cost:", cost)
        print('DONE WITH EPOCH')
# Pick 10 random images
sample_indexes = random.sample(range(len(images28)), 10)
sample_images = [images28[i] for i in sample_indexes]
sample_labels = [labels[i] for i in sample_indexes]

# Run the "predicted_labels" op.
predicted = sess.run([correct_pred], feed_dict={x: sample_images})[0]

# Print the real and predicted labels
print(sample_labels)
print(predicted)

fig = plt.figure(figsize=(10, 10))
for i in range(len(sample_images)):
    truth = sample_labels[i]
    prediction = predicted[i]
    plt.subplot(5, 2,1+i)
    plt.axis('off')
    color='green' if truth == prediction else 'red'
    plt.text(40, 10, "Truth:        {0}\nPrediction: {1}".format(truth, prediction),
             fontsize=12, color=color)
    plt.imshow(sample_images[i])

plt.show()